//this source code was auto-generated by tolua#, do not modify it
using System;
using System.Runtime.InteropServices;
using LuaInterface;

public class LuaInterface_LuaFieldWrap
{
	public static void Register(LuaState L)
	{
		IntPtr lazyWrapFunc = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)LazyWrap);
		L.BeginClass(typeof(LuaInterface.LuaField), typeof(System.Object));
		L.RegLazyFunction("Get", lazyWrapFunc);
		L.RegLazyFunction("Set", lazyWrapFunc);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Get(IntPtr L)
	{
		try
		{			
			LuaField obj = (LuaField)ToLua.CheckObject(L, 1, typeof(LuaField));            
            return obj.Get(L);						
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Set(IntPtr L)
	{
		try
		{			
            LuaField obj = (LuaField)ToLua.CheckObject(L, 1, typeof(LuaField));            
            return obj.Set(L);
        }
        catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LazyWrap(IntPtr L)
	{
		try
		{
			bool lazy = LuaDLL.luaL_checkboolean(L, LuaDLL.lua_upvalueindex(5));
			string key = LuaDLL.lua_tostring(L, LuaDLL.lua_upvalueindex(4));

			switch (key)
			{
				case "Get":
					return ToLua.LazyRegisterFunc(lazy, "Get", Get, L);
				case "Set":
					return ToLua.LazyRegisterFunc(lazy, "Set", Set, L);
			}
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

