//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;
using UnityEngine;

public class System_ArrayWrap 
{
	public static void Register(LuaState L)
	{
        L.BeginClass(typeof(Array), typeof(System.Object));
        L.RegFunction(".geti", get_Item);
        L.RegFunction(".seti", set_Item);
        L.RegFunction("ToTable", ToTable);
		L.RegFunction("GetLength", GetLength);
		L.RegFunction("GetLongLength", GetLongLength);
		L.RegFunction("GetLowerBound", GetLowerBound);
		L.RegFunction("GetValue", GetValue);
		L.RegFunction("SetValue", SetValue);
		L.RegFunction("GetEnumerator", GetEnumerator);
		L.RegFunction("GetUpperBound", GetUpperBound);
		L.RegFunction("CreateInstance", CreateInstance);
		L.RegFunction("BinarySearch", BinarySearch);
		L.RegFunction("Clear", Clear);
		L.RegFunction("Clone", Clone);
		L.RegFunction("Copy", Copy);
		L.RegFunction("IndexOf", IndexOf);
		L.RegFunction("Initialize", Initialize);
		L.RegFunction("LastIndexOf", LastIndexOf);
		L.RegFunction("Reverse", Reverse);
		L.RegFunction("Sort", Sort);
		L.RegFunction("CopyTo", CopyTo);
		L.RegFunction("ConstrainedCopy", ConstrainedCopy);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Length", get_Length, null);
		L.RegVar("LongLength", get_LongLength, null);
		L.RegVar("Rank", get_Rank, null);
		L.RegVar("IsSynchronized", get_IsSynchronized, null);
		L.RegVar("SyncRoot", get_SyncRoot, null);
		L.RegVar("IsFixedSize", get_IsFixedSize, null);
		L.RegVar("IsReadOnly", get_IsReadOnly, null);
		L.EndClass();
	}

    static bool GetPrimitiveValue(IntPtr L, object obj, Type t, int index)
    {
        bool flag = true;
        string typeFullName = t.FullName;

        switch (typeFullName)
        {
            case "System.Single":
                float[] farray = obj as float[];
                float fret = farray[index];
                LuaDLL.lua_pushnumber(L, fret);            
                break;
            case "System.Int32":
                int[] array = obj as int[];
                int ret = array[index];
                LuaDLL.lua_pushinteger(L, ret);
                break;
            case "System.Double":
                double[] darray = obj as double[];
                double dret = darray[index];
                LuaDLL.lua_pushnumber(L, dret);
                break;
            case "System.Boolean":
                bool[] barray = obj as bool[];
                bool bret = barray[index];
                LuaDLL.lua_pushboolean(L, bret);
                break;
            case "System.UInt32":
                uint[] uarray = obj as uint[];
                uint uret = uarray[index];
                LuaDLL.lua_pushinteger(L, uret);
                break;
            case "System.SByte":
                sbyte[] sbarray = obj as sbyte[];
                sbyte sbret = sbarray[index];
                LuaDLL.lua_pushinteger(L, sbret);
                break;
            case "System.Byte":
                byte[] byarray = obj as byte[];
                byte byret = byarray[index];
                LuaDLL.lua_pushinteger(L, byret);
                break;
            case "System.Int16":
                short[] sarray = obj as short[];
                short sret = sarray[index];
                LuaDLL.lua_pushinteger(L, sret);
                break;
            case "System.UInt16":
                ushort[] usarray = obj as ushort[];
                ushort usret = usarray[index];
                LuaDLL.lua_pushinteger(L, usret);
                break;
            case "System.Char":
                char[] carray = obj as char[];
                char cret = carray[index];
                LuaDLL.lua_pushinteger(L, cret);
                break;
            case "System.Int64":
                long[] larray = obj as long[];
                long lret = larray[index];
                LuaDLL.tolua_pushint64(L, lret);
                break;
            case "System.UInt64":
                ulong[] ularray = obj as ulong[];  
                ulong ulret = ularray[index];
                LuaDLL.tolua_pushuint64(L, ulret);
                break;
            case "System.String":
            case "System.Decimal":
            case "System.Object":
            default:
                flag = false;
                break;
        }

        return flag;
    }

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_Item(IntPtr L)
    {
        try
        {
            Array obj = ToLua.ToObject(L, 1) as Array;

            if (obj == null)
            {
                throw new LuaException("trying to index an invalid object reference");                
            }

            int index = LuaDLL.tolua_tointeger(L, 2);

            if (index >= obj.Length)
            {
                throw new LuaException("array index out of bounds: " + index + " " + obj.Length);                
            }

            Type t = obj.GetType().GetElementType();

            if (t.IsValueType)
            {
                if (t.IsPrimitive)
                {
                    if (GetPrimitiveValue(L, obj, t, index))
                    {
                        return 1;
                    }
                }
                else
                {
                    string typeFullName = t.FullName;
                    switch (typeFullName)
                    {
                        case "UnityEngine.Vector3":
                            Vector3[] v3array = obj as Vector3[];
                            Vector3 v3ret = v3array[index];
                            ToLua.Push(L, v3ret);                    
                            return 1;
                        case "UnityEngine.Quaternion":
                            Quaternion[] qarray = obj as Quaternion[];
                            Quaternion qret = qarray[index];
                            ToLua.Push(L, qret);
                            return 1;        
                        case "UnityEngine.Vector2":
                            Vector2[] v2array = obj as Vector2[];
                            Vector2 v2ret = v2array[index];
                            ToLua.Push(L, v2ret);
                            return 1;               
                        case "UnityEngine.Vector4":
                            Vector4[] v4array = obj as Vector4[];
                            Vector4 v4ret = v4array[index];
                            ToLua.Push(L, v4ret);
                            return 1;                    
                        case "UnityEngine.Color":
                            Color[] array = obj as Color[];
                            Color ret = array[index];
                            ToLua.Push(L, ret);
                            return 1;                    
                    }
                }
            }            

            object val = obj.GetValue(index);
            ToLua.Push(L, val);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    static bool SetPrimitiveValue(IntPtr L, object obj, Type t, int index)
    {
        bool flag = true;
        string typeFullName = t.FullName;

        switch (typeFullName)
        {
            case "System.Single":
                float[] farray = obj as float[];
                float fval = (float)LuaDLL.luaL_checknumber(L, 3);
                farray[index] = fval;                      
                break;
            case "System.Int32":
                int[] iarray = obj as int[];
                int ival = (int)LuaDLL.luaL_checkinteger(L, 3);
                iarray[index] = ival;
                break;
            case "System.Double":
                double[] darray = obj as double[];
                double dval = LuaDLL.luaL_checknumber(L, 3);
                darray[index] = dval;
                break;
            case "System.Boolean":
                bool[] barray = obj as bool[];
                bool bval = LuaDLL.luaL_checkboolean(L, 3);
                barray[index] = bval;
                break;
            case "System.UInt32":
                uint[] uarray = obj as uint[];
                uint uval = (uint)LuaDLL.luaL_checkinteger(L, 3);
                uarray[index] = uval;
                break;
            case "System.SByte":
                sbyte[] sbarray = obj as sbyte[];
                sbyte sbval = (sbyte)LuaDLL.luaL_checkinteger(L, 3);
                sbarray[index] = sbval;
                break;
            case "System.Byte":
                byte[] byarray = obj as byte[];
                byte byval = (byte)LuaDLL.luaL_checkinteger(L, 3);
                byarray[index] = byval;
                break;
            case "System.Int16":
                short[] sarray = obj as short[];
                short sval = (short)LuaDLL.luaL_checkinteger(L, 3);
                sarray[index] = sval;
                break;
            case "System.UInt16":
                ushort[] usarray = obj as ushort[];
                ushort usval = (ushort)LuaDLL.luaL_checkinteger(L, 3);
                usarray[index] = usval;
                break;
            case "System.Char":
                char[] carray = obj as char[];
                char cval = (char)LuaDLL.luaL_checkinteger(L, 3);
                carray[index] = cval;
                break;
            case "System.Int64":
                long[] larray = obj as long[];
                long lval = LuaDLL.tolua_toint64(L, 3);
                larray[index] = lval;
                break;
            case "System.UInt64":
                ulong[] ularray = obj as ulong[];
                ulong ulval = LuaDLL.tolua_touint64(L, 3);
                ularray[index] = ulval;
                break;
            case "System.String":
            case "System.Decimal":
            case "System.Object":
            default:
                flag = false;
                break;
        }

        return flag;
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int set_Item(IntPtr L)
    {
        try
        {
            Array obj = ToLua.ToObject(L, 1) as Array;

            if (obj == null)
            {
                throw new LuaException("trying to index an invalid object reference");
            }

            int index = (int)LuaDLL.tolua_tointeger(L, 2);            
            Type t = obj.GetType().GetElementType();

            if (t.IsValueType)
            {
                if (t.IsPrimitive)
                {
                    if (SetPrimitiveValue(L, obj, t, index))
                    {
                        return 0;
                    }
                }
                else
                {
                    string typeFullName = t.FullName;
                    switch (typeFullName)
                    {
                        case "UnityEngine.Vector3":
                            Vector3[] v3array = obj as Vector3[];
                            Vector3 v3val = ToLua.ToVector3(L, 3);
                            v3array[index] = v3val;
                            return 0;
                        case "UnityEngine.Quaternion":
                            Quaternion[] qarray = obj as Quaternion[];
                            Quaternion qval = ToLua.ToQuaternion(L, 3);
                            qarray[index] = qval;
                            return 0;
                        case "UnityEngine.Vector2":
                            Vector2[] v2array = obj as Vector2[];
                            Vector2 v2val = ToLua.ToVector2(L, 3);
                            v2array[index] = v2val;
                            return 0;
                        case "UnityEngine.Vector4":
                            Vector4[] v4array = obj as Vector4[];
                            Vector4 v4val = ToLua.ToVector4(L, 3);
                            v4array[index] = v4val;
                            return 0;            
                        case "UnityEngine.Color":
                            Color[] array = obj as Color[];
                            Color val = ToLua.ToColor(L, 3);
                            array[index] = val;
                            return 0;
                    }
                }
            }

            if (!TypeChecker.CheckType(L, t, 3))
            {                                
                return LuaDLL.luaL_typerror(L, 3, LuaMisc.GetTypeName(t));
            }

            object v = ToLua.CheckVarObject(L, 3, t);
            v = TypeChecker.ChangeType(v, t);
            obj.SetValue(v, index);
            return 0;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int get_Length(IntPtr L)
    {
        try
        {
            Array obj = ToLua.ToObject(L, 1) as Array;

            if (obj == null)
            {
                throw new LuaException("trying to index an invalid object reference");                
            }

            LuaDLL.lua_pushinteger(L, obj.Length);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int ToTable(IntPtr L)
    {
        try
        {
            Array obj = ToLua.ToObject(L, 1) as Array;

            if (obj == null)
            {
                throw new LuaException("trying to index an invalid object reference");                
            }

            LuaDLL.lua_createtable(L, obj.Length, 0);
            Type t = obj.GetType().GetElementType();

            if (t.IsValueType)
            {
                string typeFullName = t.FullName;
                if (t.IsPrimitive)
                {
                    switch (typeFullName)
                    {
                        case "System.Single":
                            float[] farray = obj as float[];

                            for (int i = 0; i < farray.Length; i++)
                            {
                                float fret = farray[i];
                                LuaDLL.lua_pushnumber(L, fret);
                                LuaDLL.lua_rawseti(L, -2, i + 1);
                            }

                            return 1;
                        case "System.Int32":
                            int[] iarray = obj as int[];

                            for (int i = 0; i < iarray.Length; i++)
                            {
                                int iret = iarray[i];
                                LuaDLL.lua_pushinteger(L, iret);
                                LuaDLL.lua_rawseti(L, -2, i + 1);
                            }

                            return 1;
                        case "System.Double":
                            double[] darray = obj as double[];

                            for (int i = 0; i < darray.Length; i++)
                            {
                                double dret = darray[i];
                                LuaDLL.lua_pushnumber(L, dret);
                                LuaDLL.lua_rawseti(L, -2, i + 1);
                            }

                            return 1;
                        case "System.Boolean":
                            bool[] barray = obj as bool[];

                            for (int i = 0; i < barray.Length; i++)
                            {
                                bool bret = barray[i];
                                LuaDLL.lua_pushboolean(L, bret);
                                LuaDLL.lua_rawseti(L, -2, i + 1);
                            }

                            return 1;
                        case "System.UInt32":
                            uint[] uarray = obj as uint[];

                            for (int i = 0; i < uarray.Length; i++)
                            {
                                uint uret = uarray[i];
                                LuaDLL.lua_pushinteger(L, uret);
                                LuaDLL.lua_rawseti(L, -2, i + 1);
                            }

                            return 1;
                        case "System.SByte":
                            sbyte[] sbarray = obj as sbyte[];

                            for (int i = 0; i < sbarray.Length; i++)
                            {
                                sbyte sbret = sbarray[i];
                                LuaDLL.lua_pushinteger(L, sbret);
                                LuaDLL.lua_rawseti(L, -2, i + 1);
                            }

                            return 1;
                        case "System.Byte":
                            byte[] byarray = obj as byte[];

                            for (int i = 0; i < byarray.Length; i++)
                            {
                                byte byret = byarray[i];
                                LuaDLL.lua_pushinteger(L, byret);
                                LuaDLL.lua_rawseti(L, -2, i + 1);
                            }

                            return 1;
                        case "System.Int16":
                            short[] sarray = obj as short[];

                            for (int i = 0; i < sarray.Length; i++)
                            {
                                short sret = sarray[i];
                                LuaDLL.lua_pushinteger(L, sret);
                                LuaDLL.lua_rawseti(L, -2, i + 1);
                            }

                            return 1;
                        case "System.UInt16":
                            ushort[] array = obj as ushort[];

                            for (int i = 0; i < array.Length; i++)
                            {
                                ushort ret = array[i];
                                LuaDLL.lua_pushinteger(L, ret);
                                LuaDLL.lua_rawseti(L, -2, i + 1);
                            }

                            return 1;
                        case "System.Char":
                            char[] carray = obj as char[];

                            for (int i = 0; i < carray.Length; i++)
                            {
                                char cret = carray[i];
                                LuaDLL.lua_pushinteger(L, cret);
                                LuaDLL.lua_rawseti(L, -2, i + 1);
                            }

                            return 1;
                        case "System.Int64":
                            long[] larray = obj as long[];

                            for (int i = 0; i < larray.Length; i++)
                            {
                                long lret = larray[i];
                                LuaDLL.tolua_pushint64(L, lret);
                                LuaDLL.lua_rawseti(L, -2, i + 1);
                            }

                            return 1;
                        case "System.UInt64":
                            ulong[] ularray = obj as ulong[];

                            for (int i = 0; i < ularray.Length; i++)
                            {
                                ulong ulret = ularray[i];
                                LuaDLL.tolua_pushuint64(L, ulret);
                                LuaDLL.lua_rawseti(L, -2, i + 1);
                            }

                            return 1;
                    }
                }
                else 
                {
                    switch (typeFullName)
                    {
                        case "UnityEngine.Vector3":
                            Vector3[] v3array = obj as Vector3[];

                            for (int i = 0; i < v3array.Length; i++)
                            {
                                Vector3 v3ret = v3array[i];
                                ToLua.Push(L, v3ret);
                                LuaDLL.lua_rawseti(L, -2, i + 1);
                            }

                            return 1;
                        case "UnityEngine.Quaternion":
                            Quaternion[] qarray = obj as Quaternion[];

                            for (int i = 0; i < qarray.Length; i++)
                            {
                                Quaternion qret = qarray[i];
                                ToLua.Push(L, qret);
                                LuaDLL.lua_rawseti(L, -2, i + 1);
                            }

                            return 1;
                        case "UnityEngine.Vector2":
                            Vector2[] v2array = obj as Vector2[];

                            for (int i = 0; i < v2array.Length; i++)
                            {
                                Vector2 v2ret = v2array[i];
                                ToLua.Push(L, v2ret);
                                LuaDLL.lua_rawseti(L, -2, i + 1);
                            }

                            return 1;
                        case "UnityEngine.Vector4":
                            Vector4[] v4array = obj as Vector4[];

                            for (int i = 0; i < v4array.Length; i++)
                            {
                                Vector4 v4ret = v4array[i];
                                ToLua.Push(L, v4ret);
                                LuaDLL.lua_rawseti(L, -2, i + 1);
                            }

                            return 1;      
                        case "UnityEngine.Color":
                            Color[] array = obj as Color[];

                            for (int i = 0; i < array.Length; i++)
                            {
                                Color ret = array[i];
                                ToLua.Push(L, ret);
                                LuaDLL.lua_rawseti(L, -2, i + 1);
                            }

                            return 1;
                    }
                }
            }


            for (int i = 0; i < obj.Length; i++)
            {
                object val = obj.GetValue(i);
                ToLua.Push(L, val);
                LuaDLL.lua_rawseti(L, -2, i + 1);
            }

            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLength(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Array obj = (System.Array)ToLua.CheckObject<Array>(L, 1);
			int arg0 = LuaDLL.luaL_checkinteger(L, 2);
			int o = obj.GetLength(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
        catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLongLength(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
            System.Array obj = (System.Array)ToLua.CheckObject<Array>(L, 1);
            int arg0 = LuaDLL.luaL_checkinteger(L, 2);
			long o = obj.GetLongLength(arg0);
            LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
        catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLowerBound(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
            System.Array obj = (System.Array)ToLua.CheckObject<Array>(L, 1);
            int arg0 = LuaDLL.luaL_checkinteger(L, 2);
			int o = obj.GetLowerBound(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
        catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetValue(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);            

            if (count == 2 && TypeChecker.CheckTypes<long>(L, 2))
			{
                System.Array obj = (System.Array)ToLua.CheckObject<Array>(L, 1);
                long arg0 = LuaDLL.tolua_toint64(L, 2);
				object o = obj.GetValue(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<long, long>(L, 2))
			{
                System.Array obj = (System.Array)ToLua.CheckObject<Array>(L, 1);
                long arg0 = LuaDLL.tolua_toint64(L, 2);
                long arg1 = LuaDLL.tolua_toint64(L, 3);
				object o = obj.GetValue(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, int>(L, 2))
			{
                System.Array obj = (System.Array)ToLua.CheckObject<Array>(L, 1);
                int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				object o = obj.GetValue(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<long, long, long>(L, 2))
			{
                System.Array obj = (System.Array)ToLua.CheckObject<Array>(L, 1);
                long arg0 = (long)LuaDLL.tolua_toint64(L, 2);
                long arg1 = (long)LuaDLL.tolua_toint64(L, 3);
                long arg2 = (long)LuaDLL.tolua_toint64(L, 4);
				object o = obj.GetValue(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<int, int, int>(L, 2))
			{
                System.Array obj = (System.Array)ToLua.CheckObject<Array>(L, 1);
                int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
				object o = obj.GetValue(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (TypeChecker.CheckParamsType<long>(L, 2, count - 1))
			{
                System.Array obj = (System.Array)ToLua.CheckObject<Array>(L, 1);
                long[] arg0 = ToLua.ToParamsNumber<long>(L, 2, count - 1);
				object o = obj.GetValue(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (TypeChecker.CheckParamsType<int>(L, 2, count - 1))
			{
                System.Array obj = (System.Array)ToLua.CheckObject<Array>(L, 1);
                int[] arg0 = ToLua.ToParamsNumber<int>(L, 2, count - 1);
				object o = obj.GetValue(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Array.GetValue");
			}
		}
        catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetValue(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);            

            if (count == 3 && TypeChecker.CheckTypes<object, long>(L, 2))
			{
				System.Array obj = (System.Array)ToLua.CheckObject<System.Array>(L, 1);
                object arg0 = ToLua.ToVarObject(L, 2, obj.GetType().GetElementType());
                long arg1 = LuaDLL.tolua_toint64(L, 3);
				obj.SetValue(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<object, int, int>(L, 2))
			{
				System.Array obj = (System.Array)ToLua.CheckObject<System.Array>(L, 1);
                object arg0 = ToLua.ToVarObject(L, 2, obj.GetType().GetElementType());
				int arg1 = LuaDLL.tolua_tointeger(L, 3);
				int arg2 = LuaDLL.tolua_tointeger(L, 4);
				obj.SetValue(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<object, long, long>(L, 2))
			{
				System.Array obj = (System.Array)ToLua.CheckObject<System.Array>(L, 1);
                object arg0 = ToLua.ToVarObject(L, 2, obj.GetType().GetElementType());
                long arg1 = LuaDLL.tolua_toint64(L, 3);
                long arg2 = LuaDLL.tolua_toint64(L, 4);
				obj.SetValue(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes<object, int, int, int>(L, 2))
			{
				System.Array obj = (System.Array)ToLua.CheckObject<System.Array>(L, 1);
                object arg0 = ToLua.ToVarObject(L, 2, obj.GetType().GetElementType());
				int arg1 = LuaDLL.tolua_tointeger(L, 3);
				int arg2 = LuaDLL.tolua_tointeger(L, 4);
				int arg3 = LuaDLL.tolua_tointeger(L, 5);
				obj.SetValue(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes<object, long, long, long>(L, 2))
			{
				System.Array obj = (System.Array)ToLua.CheckObject<System.Array>(L, 1);
                object arg0 = ToLua.ToVarObject(L, 2, obj.GetType().GetElementType());
                long arg1 = LuaDLL.tolua_toint64(L, 3);
                long arg2 = LuaDLL.tolua_toint64(L, 4);
                long arg3 = LuaDLL.tolua_toint64(L, 5);
				obj.SetValue(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (TypeChecker.CheckTypes<object>(L, 2) && TypeChecker.CheckParamsType<long>(L, 3, count - 2))
			{
				System.Array obj = (System.Array)ToLua.CheckObject<System.Array>(L, 1);
                object arg0 = ToLua.ToVarObject(L, 2, obj.GetType().GetElementType());
				long[] arg1 = ToLua.ToParamsNumber<long>(L, 3, count - 2);
				obj.SetValue(arg0, arg1);
				return 0;
			}
			else if (TypeChecker.CheckTypes<object>(L, 2) && TypeChecker.CheckParamsType<int>(L, 3, count - 2))
			{
				System.Array obj = (System.Array)ToLua.CheckObject<System.Array>(L, 1);
                object arg0 = ToLua.ToVarObject(L, 2, obj.GetType().GetElementType());
				int[] arg1 = ToLua.ToParamsNumber<int>(L, 3, count - 2);
				obj.SetValue(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Array.SetValue");
			}
		}
        catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEnumerator(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
            System.Array obj = (System.Array)ToLua.CheckObject<Array>(L, 1);
            System.Collections.IEnumerator o = obj.GetEnumerator();
			ToLua.Push(L, o);
			return 1;
		}
        catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUpperBound(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
            System.Array obj = (System.Array)ToLua.CheckObject<Array>(L, 1);
            int arg0 = LuaDLL.luaL_checkinteger(L, 2);
			int o = obj.GetUpperBound(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
        catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateInstance(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);            

            if (count == 2 && TypeChecker.CheckTypes<System.Type, int>(L, 1))
			{
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 1);
				int arg1 = LuaDLL.tolua_tointeger(L, 2);
				System.Array o = System.Array.CreateInstance(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Type, int[], int[]>(L, 1))
			{
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 1);
				int[] arg1 = ToLua.CheckNumberArray<int>(L, 2);
				int[] arg2 = ToLua.CheckNumberArray<int>(L, 3);
				System.Array o = System.Array.CreateInstance(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Type, int, int>(L, 1))
			{
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 1);
				int arg1 = LuaDLL.tolua_tointeger(L, 2);
				int arg2 = LuaDLL.tolua_tointeger(L, 3);
				System.Array o = System.Array.CreateInstance(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<System.Type, int, int, int>(L, 1))
			{
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 1);
				int arg1 = LuaDLL.tolua_tointeger(L, 2);
				int arg2 = LuaDLL.tolua_tointeger(L, 3);
				int arg3 = LuaDLL.tolua_tointeger(L, 4);
				System.Array o = System.Array.CreateInstance(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Type>(L, 1) && TypeChecker.CheckParamsType<long>(L, 2, count - 1))
			{
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 1);
				long[] arg1 = ToLua.ToParamsNumber<long>(L, 2, count - 1);
				System.Array o = System.Array.CreateInstance(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.Type>(L, 1) && TypeChecker.CheckParamsType<int>(L, 2, count - 1))
			{
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 1);
				int[] arg1 = ToLua.ToParamsNumber<int>(L, 2, count - 1);
				System.Array o = System.Array.CreateInstance(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Array.CreateInstance");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BinarySearch(IntPtr L)
	{
        try
        {
            int count = LuaDLL.lua_gettop(L);

            if (count == 2)
            {
                System.Array arg0 = (System.Array)ToLua.CheckObject<System.Array>(L, 1);
                object arg1 = ToLua.ToVarObject(L, 2, arg0.GetType().GetElementType());
                int o = System.Array.BinarySearch(arg0, arg1);
                LuaDLL.lua_pushinteger(L, o);
                return 1;
            }
            else if (count == 3)
            {
                System.Array arg0 = (System.Array)ToLua.CheckObject<System.Array>(L, 1);
                object arg1 = ToLua.ToVarObject(L, 2, arg0.GetType().GetElementType());
                System.Collections.IComparer arg2 = (System.Collections.IComparer)ToLua.CheckObject<System.Collections.IComparer>(L, 3);
                int o = System.Array.BinarySearch(arg0, arg1, arg2);
                LuaDLL.lua_pushinteger(L, o);
                return 1;
            }
            else if (count == 4)
            {
                System.Array arg0 = (System.Array)ToLua.CheckObject<System.Array>(L, 1);
                int arg1 = LuaDLL.luaL_checkinteger(L, 2);
                int arg2 = LuaDLL.luaL_checkinteger(L, 3);
                object arg3 = ToLua.ToVarObject(L, 4, arg0.GetType().GetElementType());
                int o = System.Array.BinarySearch(arg0, arg1, arg2, arg3);
                LuaDLL.lua_pushinteger(L, o);
                return 1;
            }
            else if (count == 5)
            {
                System.Array arg0 = (System.Array)ToLua.CheckObject<System.Array>(L, 1);
                int arg1 = LuaDLL.luaL_checkinteger(L, 2);
                int arg2 = LuaDLL.luaL_checkinteger(L, 3);
                object arg3 = ToLua.ToVarObject(L, 4, arg0.GetType().GetElementType());
                System.Collections.IComparer arg4 = (System.Collections.IComparer)ToLua.CheckObject<System.Collections.IComparer>(L, 5);
                int o = System.Array.BinarySearch(arg0, arg1, arg2, arg3, arg4);
                LuaDLL.lua_pushinteger(L, o);
                return 1;
            }
            else
            {
                return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Array.BinarySearch");
            }
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.Array arg0 = (System.Array)ToLua.CheckObject(L, 1, typeof(System.Array));
			int arg1 = LuaDLL.luaL_checkinteger(L, 2);
			int arg2 = LuaDLL.luaL_checkinteger(L, 3);
			System.Array.Clear(arg0, arg1, arg2);
			return 0;
		}
        catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clone(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
            System.Array obj = (System.Array)ToLua.CheckObject<Array>(L, 1);
            object o = obj.Clone();
			ToLua.Push(L, o);
			return 1;
		}
        catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Copy(IntPtr L)
	{
        try
        {
            int count = LuaDLL.lua_gettop(L);

            if (count == 3)
            {
                System.Array arg0 = (System.Array)ToLua.CheckObject<System.Array>(L, 1);
                System.Array arg1 = (System.Array)ToLua.CheckObject<System.Array>(L, 2);
                long arg2 = LuaDLL.tolua_checkint64(L, 3);
                System.Array.Copy(arg0, arg1, arg2);
                return 0;
            }
            else if (count == 5 && TypeChecker.CheckTypes<long, System.Array, long, long>(L, 2))
            {
                System.Array arg0 = (System.Array)ToLua.CheckObject<System.Array>(L, 1);
                long arg1 = LuaDLL.tolua_toint64(L, 2);
                System.Array arg2 = (System.Array)ToLua.ToObject(L, 3);
                long arg3 = LuaDLL.tolua_toint64(L, 4);
                long arg4 = LuaDLL.tolua_toint64(L, 5);
                System.Array.Copy(arg0, arg1, arg2, arg3, arg4);
                return 0;
            }
            else if (count == 5 && TypeChecker.CheckTypes<int, System.Array, int, int>(L, 2))
            {
                System.Array arg0 = (System.Array)ToLua.CheckObject<System.Array>(L, 1);
                int arg1 = LuaDLL.tolua_tointeger(L, 2);
                System.Array arg2 = (System.Array)ToLua.ToObject(L, 3);
                int arg3 = LuaDLL.tolua_tointeger(L, 4);
                int arg4 = LuaDLL.tolua_tointeger(L, 5);
                System.Array.Copy(arg0, arg1, arg2, arg3, arg4);
                return 0;
            }
            else
            {
                return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Array.Copy");
            }
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IndexOf(IntPtr L)
	{
        try
        {
            int count = LuaDLL.lua_gettop(L);

            if (count == 2)
            {
                System.Array arg0 = (System.Array)ToLua.CheckObject<System.Array>(L, 1);
                object arg1 = ToLua.ToVarObject(L, 2, arg0.GetType().GetElementType());
                int o = System.Array.IndexOf(arg0, arg1);
                LuaDLL.lua_pushinteger(L, o);
                return 1;
            }
            else if (count == 3)
            {
                System.Array arg0 = (System.Array)ToLua.CheckObject<System.Array>(L, 1);
                object arg1 = ToLua.ToVarObject(L, 2, arg0.GetType().GetElementType());
                int arg2 = LuaDLL.luaL_checkinteger(L, 3);
                int o = System.Array.IndexOf(arg0, arg1, arg2);
                LuaDLL.lua_pushinteger(L, o);
                return 1;
            }
            else if (count == 4)
            {
                System.Array arg0 = (System.Array)ToLua.CheckObject<System.Array>(L, 1);
                object arg1 = ToLua.ToVarObject(L, 2, arg0.GetType().GetElementType());
                int arg2 = LuaDLL.luaL_checkinteger(L, 3);
                int arg3 = LuaDLL.luaL_checkinteger(L, 4);
                int o = System.Array.IndexOf(arg0, arg1, arg2, arg3);
                LuaDLL.lua_pushinteger(L, o);
                return 1;
            }
            else
            {
                return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Array.IndexOf");
            }
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Initialize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
            System.Array obj = (System.Array)ToLua.CheckObject<Array>(L, 1);
            obj.Initialize();
			return 0;
		}
        catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LastIndexOf(IntPtr L)
	{
        try
        {
            int count = LuaDLL.lua_gettop(L);

            if (count == 2)
            {
                System.Array arg0 = (System.Array)ToLua.CheckObject<System.Array>(L, 1);
                object arg1 = ToLua.ToVarObject(L, 2, arg0.GetType().GetElementType());
                int o = System.Array.LastIndexOf(arg0, arg1);
                LuaDLL.lua_pushinteger(L, o);
                return 1;
            }
            else if (count == 3)
            {
                System.Array arg0 = (System.Array)ToLua.CheckObject<System.Array>(L, 1);
                object arg1 = ToLua.ToVarObject(L, 2, arg0.GetType().GetElementType());
                int arg2 = LuaDLL.luaL_checkinteger(L, 3);
                int o = System.Array.LastIndexOf(arg0, arg1, arg2);
                LuaDLL.lua_pushinteger(L, o);
                return 1;
            }
            else if (count == 4)
            {
                System.Array arg0 = (System.Array)ToLua.CheckObject<System.Array>(L, 1);
                object arg1 = ToLua.ToVarObject(L, 2, arg0.GetType().GetElementType());
                int arg2 = LuaDLL.luaL_checkinteger(L, 3);
                int arg3 = LuaDLL.luaL_checkinteger(L, 4);
                int o = System.Array.LastIndexOf(arg0, arg1, arg2, arg3);
                LuaDLL.lua_pushinteger(L, o);
                return 1;
            }
            else
            {
                return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Array.LastIndexOf");
            }
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reverse(IntPtr L)
	{
        try
        {
            int count = LuaDLL.lua_gettop(L);

            if (count == 1)
            {
                System.Array arg0 = (System.Array)ToLua.CheckObject<System.Array>(L, 1);
                System.Array.Reverse(arg0);
                return 0;
            }
            else if (count == 3)
            {
                System.Array arg0 = (System.Array)ToLua.CheckObject<System.Array>(L, 1);
                int arg1 = LuaDLL.luaL_checkinteger(L, 2);
                int arg2 = LuaDLL.luaL_checkinteger(L, 3);
                System.Array.Reverse(arg0, arg1, arg2);
                return 0;
            }
            else
            {
                return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Array.Reverse");
            }
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Sort(IntPtr L)
	{
        try
        {
            int count = LuaDLL.lua_gettop(L);

            if (count == 1)
            {
                System.Array arg0 = (System.Array)ToLua.CheckObject<System.Array>(L, 1);
                System.Array.Sort(arg0);
                return 0;
            }
            else if (count == 2 && TypeChecker.CheckTypes<System.Collections.IComparer>(L, 2))
            {
                System.Array arg0 = (System.Array)ToLua.CheckObject<System.Array>(L, 1);
                System.Collections.IComparer arg1 = (System.Collections.IComparer)ToLua.ToObject(L, 2);
                System.Array.Sort(arg0, arg1);
                return 0;
            }
            else if (count == 2 && TypeChecker.CheckTypes<System.Array>(L, 2))
            {
                System.Array arg0 = (System.Array)ToLua.CheckObject<System.Array>(L, 1);
                System.Array arg1 = (System.Array)ToLua.ToObject(L, 2);
                System.Array.Sort(arg0, arg1);
                return 0;
            }
            else if (count == 3 && TypeChecker.CheckTypes<System.Array, System.Collections.IComparer>(L, 2))
            {
                System.Array arg0 = (System.Array)ToLua.CheckObject<System.Array>(L, 1);
                System.Array arg1 = (System.Array)ToLua.ToObject(L, 2);
                System.Collections.IComparer arg2 = (System.Collections.IComparer)ToLua.ToObject(L, 3);
                System.Array.Sort(arg0, arg1, arg2);
                return 0;
            }
            else if (count == 3 && TypeChecker.CheckTypes<int, int>(L, 2))
            {
                System.Array arg0 = (System.Array)ToLua.CheckObject<System.Array>(L, 1);
                int arg1 = LuaDLL.tolua_tointeger(L, 2);
                int arg2 = LuaDLL.tolua_tointeger(L, 3);
                System.Array.Sort(arg0, arg1, arg2);
                return 0;
            }
            else if (count == 4 && TypeChecker.CheckTypes<int, int, System.Collections.IComparer>(L, 2))
            {
                System.Array arg0 = (System.Array)ToLua.CheckObject<System.Array>(L, 1);
                int arg1 = LuaDLL.tolua_tointeger(L, 2);
                int arg2 = LuaDLL.tolua_tointeger(L, 3);
                System.Collections.IComparer arg3 = (System.Collections.IComparer)ToLua.ToObject(L, 4);
                System.Array.Sort(arg0, arg1, arg2, arg3);
                return 0;
            }
            else if (count == 4 && TypeChecker.CheckTypes<System.Array, int, int>(L, 2))
            {
                System.Array arg0 = (System.Array)ToLua.CheckObject<System.Array>(L, 1);
                System.Array arg1 = (System.Array)ToLua.ToObject(L, 2);
                int arg2 = LuaDLL.tolua_tointeger(L, 3);
                int arg3 = LuaDLL.tolua_tointeger(L, 4);
                System.Array.Sort(arg0, arg1, arg2, arg3);
                return 0;
            }
            else if (count == 5)
            {
                System.Array arg0 = (System.Array)ToLua.CheckObject<System.Array>(L, 1);
                System.Array arg1 = (System.Array)ToLua.CheckObject<System.Array>(L, 2);
                int arg2 = LuaDLL.luaL_checkinteger(L, 3);
                int arg3 = LuaDLL.luaL_checkinteger(L, 4);
                System.Collections.IComparer arg4 = (System.Collections.IComparer)ToLua.CheckObject<System.Collections.IComparer>(L, 5);
                System.Array.Sort(arg0, arg1, arg2, arg3, arg4);
                return 0;
            }
            else
            {
                return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Array.Sort");
            }
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CopyTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
            System.Array obj = (System.Array)ToLua.CheckObject<Array>(L, 1);
            System.Array arg0 = (System.Array)ToLua.CheckObject<Array>(L, 2);
            long arg1 = (long)LuaDLL.luaL_checknumber(L, 3);
			obj.CopyTo(arg0, arg1);
			return 0;
		}
        catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConstrainedCopy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			System.Array arg0 = (System.Array)ToLua.CheckObject<Array>(L, 1);
			int arg1 = LuaDLL.luaL_checkinteger(L, 2);
			System.Array arg2 = (System.Array)ToLua.CheckObject<Array>(L, 3);
			int arg3 = LuaDLL.luaL_checkinteger(L, 4);
			int arg4 = LuaDLL.luaL_checkinteger(L, 5);
			System.Array.ConstrainedCopy(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
        catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LongLength(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Array obj = (System.Array)o;
			long ret = obj.LongLength;
            LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
        catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LongLength on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Rank(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Array obj = (System.Array)o;
			int ret = obj.Rank;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
        catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Rank on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsSynchronized(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Array obj = (System.Array)o;
			bool ret = obj.IsSynchronized;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
        catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsSynchronized on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SyncRoot(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Array obj = (System.Array)o;
			object ret = obj.SyncRoot;
			ToLua.Push(L, ret);
			return 1;
		}
        catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SyncRoot on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsFixedSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Array obj = (System.Array)o;
			bool ret = obj.IsFixedSize;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
        catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsFixedSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsReadOnly(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Array obj = (System.Array)o;
			bool ret = obj.IsReadOnly;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
        catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsReadOnly on a nil value");
		}
	}
}
